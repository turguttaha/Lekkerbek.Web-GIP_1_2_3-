@using Kendo.Mvc.UI;
@using Microsoft.AspNetCore.Identity;

@{
    ViewData["Title"] = "AssignAdmin";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<h3 class="text-secondary">You can select the user you want to promote to the admin class from the list below!</h3>
<p id="error_text" class="text-danger fw-bold"></p>

@(
Html.Kendo().Grid<IdentityUser>()
.Name("grid")
.Columns(columns =>
{
    columns.Bound(f => f.UserName);
    columns.Bound(f => f.Id).Title("  ").Width(220).Filterable(false).ClientTemplate("<div class=' k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary' ><a  href='/Admins/AssignAdmin/#=Id#'>Assign To Admin</a></div>");

})
.Editable(editable => editable.Mode(GridEditMode.PopUp))
.Filterable(filterable => filterable
    .Extra(false)
    .Operators(operators => operators
        .ForString(str => str.Clear()
.IsEqualTo("Is equal to")
       )
   )
    )
.Pageable()
.Sortable()
.Scrollable()
.HtmlAttributes(new { style = "height:550px;" })
.DataSource(d =>
{
    d.Ajax()
    .Model(model =>
    {
        model.Id(user => user.Id); // Specify the property which is the unique identifier of the model.
        model.Field(user => user.Id).Editable(false); // Make the OrderID property not editable.
    })

    .Read(read => read.Action("AssignAdmin_read", "Admins")); // Action invoked when the Grid needs data.
    
})
    )
<div>
    <a asp-action="AdminList">Back to List</a>
</div>
<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var grid = $("#grid").data("kendoGrid");
            grid.cancelChanges();
            var message = " ";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += "- " + this + "\n";
                    });
                }
            });
            document.getElementById("error_text").innerText = message;
            //alert(message);
        }
    }

</script>
