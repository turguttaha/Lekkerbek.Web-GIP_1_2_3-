@using Kendo.Mvc.UI;
@using Lekkerbek.Web.Models;
@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

@(Html.Kendo().Grid<Lekkerbek.Web.Models.Chef>()
.Name("grid")
.Columns(columns =>
{    
    columns.Bound(f => f.ChefName);
    columns.Command(command => { command.Edit(); command.Destroy(); }).Width(200);
})
.ToolBar(toolbar => toolbar.Create())
.Editable(editable => editable.Mode(GridEditMode.PopUp))
.Pageable()
.Sortable()
.Scrollable()
.HtmlAttributes(new { style = "height:550px;" })
.DataSource(d =>
{
    d.Ajax()
    .Model(model =>
    {
        model.Id(chef => chef.ChefId); // Specify the property which is the unique identifier of the model.
        model.Field(chef => chef.ChefId).Editable(false); // Make the OrderID property not editable.
    })
    .Events(events => events.Error("error_handler"))
    .Create(create => create.Action("EditingPopup_Create", "Chefs")) // Action invoked when the user saves a new data item.
    .Read(read => read.Action("ReadChefs", "Chefs")) // Action invoked when the Grid needs data.
    .Update(update => update.Action("EditingPopup_Update", "Chefs"))
    .Destroy(delete => delete.Action("DeleteChef", "Chefs")); // Action invoked when the user removes a data item.
})
    )

<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var grid = $("#grid").data("kendoGrid");
            grid.cancelChanges();
            var message = " ";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += "- " + this + "\n";
                    });
                }
            });
            document.getElementById("error_text").innerText = message;
            //alert(message);
        }
    }

</script>
